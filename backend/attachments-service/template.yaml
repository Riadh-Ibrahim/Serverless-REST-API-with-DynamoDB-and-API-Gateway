AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "Attachments microservice for task items â€” REST over API Gateway & DynamoDB (customized)"

Globals:
  Function:
    Runtime: python3.8

Resources:
  FilesApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: dev
      Auth:
        Authorizers:
          TodoAuthorizer:
            IdentitySource: "$request.header.Authorization"
            JwtConfiguration:
              issuer:
                !Sub
                  - 'https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPoolId}'
                  - { UserPoolId: !ImportValue todo-houessou-com-TodoUserPool }
              audience:
                - !ImportValue todo-houessou-com-TodoUserPoolClient
        DefaultAuthorizer: TodoAuthorizer
      CorsConfiguration:
        AllowMethods: [GET, POST, DELETE, HEAD, PUT, OPTIONS]
        AllowOrigins:
          - https://todo.houessou.com
        AllowHeaders:
          - '*'

  getTaskAttachments:
    Type: AWS::Serverless::Function
    Properties:
      Description: "List attachments for a given task (reads DynamoDB via GSI)"
      Environment:
        Variables:
          TASKFILES_TABLE: !Ref TaskFilesTable
      CodeUri: ./functions
      Handler: getTodoFiles.lambda_handler
      Events:
        GetAttachmentsRoute:
          Type: HttpApi
          Properties:
            ApiId: !Ref FilesApi
            Path: /tasks/{taskID}/attachments
            Method: GET
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: ['dynamodb:*','s3:GetObject','s3:ListBucket']
              Resource:
                - !GetAtt 'TaskFilesTable.Arn'
                - !Sub '${TaskFilesTable.Arn}/index/*'
                - !GetAtt 'TaskFilesBucket.Arn'
                - !Sub '${TaskFilesBucket.Arn}/*'

  addTaskAttachment:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Create attachment metadata (priority, tags) and store pointer to S3 object"
      Environment:
        Variables:
          TASKFILES_TABLE: !Ref TaskFilesTable
          TASKFILES_BUCKET: !Ref TaskFilesBucket
          TASKFILES_BUCKET_CDN: !GetAtt 'TaskFilesBucketCF.DomainName'
      CodeUri: ./functions
      Handler: addTodoFiles.lambda_handler
      Events:
        UploadAttachmentRoute:
          Type: HttpApi
          Properties:
            ApiId: !Ref FilesApi
            Path: /tasks/{taskID}/attachments/upload
            Method: POST
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: ['dynamodb:*','s3:PutObject','s3:ListBucket']
              Resource:
                - !GetAtt 'TaskFilesTable.Arn'
                - !GetAtt 'TaskFilesBucket.Arn'
                - !Sub '${TaskFilesBucket.Arn}/*'

  deleteTaskAttachment:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Delete attachment record and underlying S3 object"
      Environment:
        Variables:
          TASKFILES_TABLE: !Ref TaskFilesTable
          TASKFILES_BUCKET: !Ref TaskFilesBucket
          TASKFILES_BUCKET_CDN: !GetAtt 'TaskFilesBucketCF.DomainName'
      CodeUri: ./functions
      Handler: deleteTodoFile.lambda_handler
      Events:
        DeleteAttachmentRoute:
          Type: HttpApi
          Properties:
            ApiId: !Ref FilesApi
            Path: /tasks/{taskID}/attachments/{attachmentID}/delete
            Method: DELETE
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: ['dynamodb:*','s3:PutObject','s3:GetObject','s3:DeleteObject','s3:ListBucket']
              Resource:
                - !GetAtt 'TaskFilesTable.Arn'
                - !GetAtt 'TaskFilesBucket.Arn'
                - !Sub '${TaskFilesBucket.Arn}/*'

  # DynamoDB table for task attachments
  TaskFilesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'TaskFilesTable-${AWS::StackName}'
      BillingMode: PROVISIONED
      ProvisionedThroughput: { ReadCapacityUnits: 1, WriteCapacityUnits: 1 }
      # Non-key attributes (schemaless per-item):
      # - priority: String ('low'|'medium'|'high'), optional
      # - tags: String Set (SS), optional
      # - uploadedAt: ISO8601 string
      AttributeDefinitions:
        - AttributeName: "fileID"
          AttributeType: "S"
        - AttributeName: "taskID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "fileID"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: "taskIDIndex"
          KeySchema:
            - AttributeName: "taskID"
              KeyType: "HASH"
            - AttributeName: "fileID"
              KeyType: "RANGE"
          Projection: { ProjectionType: "ALL" }
          ProvisionedThroughput: { ReadCapacityUnits: 1, WriteCapacityUnits: 1 }

  TaskFilesBucketOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'access-identity-${TaskFilesBucket}.s3.amazonaws.com'

  TaskFilesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TaskFilesBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: ['s3:GetObject']
            Resource: !Sub '${TaskFilesBucket.Arn}/*'
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${TaskFilesBucketOAI}'

  TaskFilesBucketCF:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub 'CDN for ${TaskFilesBucket}'
        Enabled: true
        DefaultCacheBehavior:
          AllowedMethods: [HEAD, DELETE, POST, GET, OPTIONS, PUT, PATCH]
          ForwardedValues: { QueryString: false }
          TargetOriginId: !Sub '${TaskFilesBucket}.s3.us-east-1.amazonaws.com'
          ViewerProtocolPolicy: redirect-to-https
        Origins:
          - S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${TaskFilesBucketOAI}'
            DomainName: !Sub '${TaskFilesBucket}.s3.us-east-1.amazonaws.com'
            Id: !Sub '${TaskFilesBucket}.s3.us-east-1.amazonaws.com'
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  # Identity pool for unauthenticated uploads (kept as in original stack)
  TodoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub 'IdentityPool_todo_houessou_com'
      AllowUnauthenticatedIdentities: true

  TodoIdentityPoolRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'identity-pool-role-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated:
                - "cognito-identity.amazonaws.com"
            Action: "sts:AssumeRoleWithWebIdentity"
            Condition:
              { "ForAnyValue:StringLike": {"cognito-identity.amazonaws.com:amr": "unauthenticated" },
                "StringEquals": {"cognito-identity.amazonaws.com:aud": !Ref TodoIdentityPool}}
      Path: "/"
      Policies:
        - PolicyName: !Sub 'identity-pool-role-policy-${AWS::StackName}'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:ListBucket"
                  - "s3:PutObject*"
                  - "s3:GetObject*"
                Resource:
                  - !GetAtt 'TaskFilesBucket.Arn'
                  - !Join ['', [!GetAtt 'TaskFilesBucket.Arn', '/*']]

  TodoIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref TodoIdentityPool
      Roles: {"unauthenticated": !GetAtt TodoIdentityPoolRole.Arn }

Outputs:
  FilesApi:
    Value: !Sub 'https://${FilesApi}.execute-api.us-east-1.amazonaws.com/dev'
    Export:
      Name: !Sub "${AWS::StackName}-FilesApiURL"
  TaskFilesTable:
    Value: !Ref TaskFilesTable
    Export:
      Name: !Sub "${AWS::StackName}-TaskFilesTable"
  TaskFilesTableArn:
    Value: !GetAtt 'TaskFilesTable.Arn'
    Export:
      Name: !Sub "${AWS::StackName}-TaskFilesTableArn"
  TaskFilesBucket:
    Value: !Ref 'TaskFilesBucket'
    Export:
      Name: !Sub "${AWS::StackName}-TaskFilesBucket"
  TaskFilesBucketCFDomainName:
    Value: !GetAtt 'TaskFilesBucketCF.DomainName'
    Export:
      Name: !Sub "${AWS::StackName}-TaskFilesBucketCFDomainName"
  TaskFilesBucketArn:
    Value: !GetAtt 'TaskFilesBucket.Arn'
    Export:
      Name: !Sub "${AWS::StackName}-TaskFilesBucketArn"
  TodoIdentityPoolId:
    Value: !Ref 'TodoIdentityPool'
    Export:
      Name: !Sub "${AWS::StackName}-TodoIdentityPoolId"
  StackName:
    Value: !Sub "${AWS::StackName}"
      Name: !Sub "${AWS::StackName}-FilesApiURL"
  TaskFilesTable:
    Value: !Ref TaskFilesTable
    Export:
      Name: !Sub "${AWS::StackName}-TaskFilesTable"
  TaskFilesTableArn:
    Value: !GetAtt 'TaskFilesTable.Arn'
    Export:
      Name: !Sub "${AWS::StackName}-TaskFilesTableArn"
  TaskFilesBucket:
    Value: !Ref 'TaskFilesBucket'
    Export:
      Name: !Sub "${AWS::StackName}-TaskFilesBucket"
  TaskFilesBucketCFDomainName:
    Value: !GetAtt 'TaskFilesBucketCF.DomainName'
    Export:
      Name: !Sub "${AWS::StackName}-TaskFilesBucketCFDomainName"
  TaskFilesBucketArn:
    Value: !GetAtt 'TaskFilesBucket.Arn'
    Export:
      Name: !Sub "${AWS::StackName}-TaskFilesBucketArn"
  TodoIdentityPoolId:
    Value: !Ref 'TodoIdentityPool'
    Export:
      Name: !Sub "${AWS::StackName}-TodoIdentityPoolId"
  StackName:
    Value: !Sub "${AWS::StackName}"
